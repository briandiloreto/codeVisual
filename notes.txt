
------------------------------------------------------------------------------
# Rust
rustup update

------------------------------------------------------------------------------
# Build everything using webpack and webpack config file to compile Rust to web assembly and package with the extension
npm run compile

    # Build dev version at target/debug
    cargo build --features vscode

    # Build release version at target/release and package at pkg
    cargo install wasm-pack
    wasm-pack build --features vscode


------------------------------------------------------------------------------
# If you are developing a VS Code extension, you can use the following commands to programmatically navigate to a symbol:
vscode.commands.executeCommand('vscode.executeDefinitionProvider')
vscode.commands.executeCommand('vscode.executeReferenceProvider')
vscode.commands.executeCommand('vscode.executeImplementationProvider')


------------------------------------------------------------------------------
# Translate Rust to Typescript
Use camelcase. Preserve comments. Indent with 2 spaces.
Translate all of this Rust code to Typescript, retaining any comments:
Give me the complete translation of the provided Rust code, meticulously maintaining all comments


------------------------------------------------------------------------------
# Typescript specialized collection types or functionalities, several libraries are available:
typescript-collections: A mature library offering various data structures like dictionaries, lists, sets, trees, etc., with full TypeScript support.
Standard Collections Library for TypeScript (scl.js): This library aims to mimic the interfaces and behaviors of standard collections found in other languages, bringing familiarity to TypeScript developers.
Immutable.js: While primarily focused on immutability, it also provides various collection types with robust TypeScript definitions.


------------------------------------------------------------------------------
# Project structure

8/5/2024
    - The project in the root foler is a Rust project
    - The project for the VS Code extension is in the subdirectory editors/code. Both projects are compiled and run from there using webpack
    - In the extension project, there are two versions of the VS Code webview, the original Crabviz one and a different interactive
        webview that uses d3-graphviz to animate transitions between graphs, These are located respectively at /contentCrab and /contentVisual
    - Crabviz webview
        - Files are in folders /webviewCrabviz and /utils
        - SVG is generated ahead of time and staticallly inserted into HTML package
        
    - Interactive webview
        - Files are in /webviewInteractive
        - SVG is generated dynamically using d3-graphviz and animated between versions
        - Build the dependencies using scripts/updateDependencies.js
    - The Rust code to generate the DOT file has been translated to Typescript and is located in folder /dotGenerator
    
    
