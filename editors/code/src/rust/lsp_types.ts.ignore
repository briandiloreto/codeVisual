
enum SymbolKind {
    File = 1, // Assuming the feature "vscode" is not enabled

    Module,
    Namespace,
    Package,
    Class,
    Method,
    Property,
    Field,
    Constructor,
    Enum,
    Interface,
    Function,
    Variable,
    Constant,
    String,
    Number,
    Boolean,
    Array,
    Object,
    Key,
    Null,
    EnumMember,
    Struct,
    Event,
    Operator,
    TypeParameter,
}

enum SymbolTag {
    /**
     * Render a symbol as obsolete, usually using a strike-out.
     */
    Deprecated = 1,
}

class Position {
    /**
     * Line position in a document (zero-based).
     */
    line: number;

    /**
     * Character offset on a line in a document (zero-based). The meaning of this
     * offset is determined by the negotiated `PositionEncodingKind`.
     *
     * If the character value is greater than the line length it defaults back
     * to the line length.
     */
    character: number;

    constructor(line: number, character: number) {
        this.line = line;
        this.character = character;
    }
}

class Range {
    /**
     * The range's start position.
     */
    start: Position;

    /**
     * The range's end position.
     */
    end: Position;

    constructor(start: Position, end: Position) {
        this.start = start;
        this.end = end;
    }
}

class DocumentSymbol {
    /**
     * The name of this symbol.
     */
    name: string;

    /**
     * More detail for this symbol, e.g the signature of a function. If not provided the
     * name is used.
     */
    detail?: string;

    /**
     * The kind of this symbol.
     */
    kind: SymbolKind;

    /**
     * Tags for this completion item.
     *  since 3.16.0
     */
    tags?: SymbolTag[];

    /**
     * The range enclosing this symbol not including leading/trailing whitespace but everything else
     * like comments. This information is typically used to determine if the the clients cursor is
     * inside the symbol to reveal in the symbol in the UI.
     */
    range: Range;

    /**
     * The range that should be selected and revealed when this symbol is being picked, e.g the name of a function.
     * Must be contained by the the `range`.
     */
    selectionRange: Range;

    /**
     * Children of this symbol, e.g. properties of a class.
     */
    children: DocumentSymbol[];

    constructor(
        name: string,
        kind: SymbolKind,
        range: Range,
        selectionRange: Range,
        children: DocumentSymbol[] = [],
        detail?: string,
        tags?: SymbolTag[]
    ) {
        this.name = name;
        this.kind = kind;
        this.range = range;
        this.selectionRange = selectionRange;
        this.children = children;
        this.detail = detail;
        this.tags = tags;
    }
}

class Uri {
    path: string;

    constructor(path: string) {
        this.path = path;
    }
}

class CallHierarchyItem {
    /**
     * The name of this item.
     */
    name: string;

    /**
     * The kind of this item.
     */
    kind: SymbolKind;

    /**
     * Tags for this item.
     */
    tags?: SymbolTag[];

    /**
     * More detail for this item, e.g. the signature of a function.
     */
    detail?: string;

    /**
     * The resource identifier of this item.
     */
    uri: Uri;

    /**
     * The range enclosing this symbol not including leading/trailing whitespace but everything else, e.g. comments and code.
     */
    range: Range;

    /**
     * The range that should be selected and revealed when this symbol is being picked, e.g. the name of a function.
     * Must be contained by the [`range`](#CallHierarchyItem.range).
     */
    selectionRange: Range;

    /**
     * A data entry field that is preserved between a call hierarchy prepare and incloming calls or outgoing calls requests.
     */
    data?: any;

    constructor(
        name: string,
        kind: SymbolKind,
        uri: Uri,
        range: Range,
        selectionRange: Range,
        detail?: string,
        tags?: SymbolTag[],
        data?: any
    ) {
        this.name = name;
        this.kind = kind;
        this.uri = uri;
        this.range = range;
        this.selectionRange = selectionRange;
        this.detail = detail;
        this.tags = tags;
        this.data = data;
    }
}

class CallHierarchyIncomingCall {
    /**
     * The item that makes the call.
     */
    from: CallHierarchyItem;

    /**
     * The range at which the calls appears. This is relative to the caller
     * denoted by [`this.from`](#CallHierarchyIncomingCall.from).
     */
    fromRanges: Range[];

    constructor(from: CallHierarchyItem, fromRanges: Range[]) {
        this.from = from;
        this.fromRanges = fromRanges;
    }
}

class CallHierarchyOutgoingCall {
    /**
     * The item that is called.
     */
    to: CallHierarchyItem;

    /**
     * The range at which this item is called. This is the range relative to the caller, e.g the item
     * passed to [`provideCallHierarchyOutgoingCalls`](#CallHierarchyItemProvider.provideCallHierarchyOutgoingCalls)
     * and not [`this.to`](#CallHierarchyOutgoingCall.to).
     */
    fromRanges: Range[];

    constructor(to: CallHierarchyItem, fromRanges: Range[]) {
        this.to = to;
        this.fromRanges = fromRanges;
    }
}

class Location {
    uri: Uri;
    range: Range;

    constructor(uri: Uri, range: Range) {
        this.uri = uri;
        this.range = range;
    }
}

class LocationLink {
    /**
     * Span of the origin of this link.
     *
     *  Used as the underlined span for mouse interaction. Defaults to the word range at
     *  the mouse position.
     */
    originSelectionRange?: Range;

    /**
     * The target resource identifier of this link.
     */
    targetUri: Uri;

    /**
     * The full target range of this link.
     */
    targetRange: Range;

    /**
     * The span of this link.
     */
    targetSelectionRange: Range;

    constructor(
        targetUri: Uri,
        targetRange: Range,
        targetSelectionRange: Range,
        originSelectionRange?: Range
    ) {
        this.targetUri = targetUri;
        this.targetRange = targetRange;
        this.targetSelectionRange = targetSelectionRange;
        this.originSelectionRange = originSelectionRange;
    }
}


